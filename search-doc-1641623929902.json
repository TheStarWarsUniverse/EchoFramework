[{"title":"Getting Started","type":0,"sectionRef":"#","url":"docs/GetStarted","content":"","keywords":""},{"title":"Installation","type":1,"pageTitle":"Getting Started","url":"docs/GetStarted#installation","content":"You are recommend to download Visual Studio Code, Rojo and Github Desktop to install it easily. "},{"title":"Step 0: Requirements","type":1,"pageTitle":"Getting Started","url":"docs/GetStarted#step-0-requirements","content":"Github account.Github account that has been invited to the TSWU Development group.Visual Studio Code.Github CLI.Rojo for both Visual Studio Code extension and Roblox Studio plugin.More than 10 braincells. "},{"title":"Step1: Github repository","type":1,"pageTitle":"Getting Started","url":"docs/GetStarted#step1-github-repository","content":"Go to Github.Click new.Select TheStarWarsUniverse for owner.Change the repository name to the project name.Add Description (optional).Private the repository.Create repository. "},{"title":"Step2: Visual Studio Code Setup","type":1,"pageTitle":"Getting Started","url":"docs/GetStarted#step2-visual-studio-code-setup","content":"Click Set up in Desktop. (Make sure you have the github desktop app installed)Select your local path.Clone the repository.Click Open in Visual Studio Code.Open the command bar. "},{"title":"Step 3: Command Bar Setup","type":1,"pageTitle":"Getting Started","url":"docs/GetStarted#step-3-command-bar-setup","content":"Run git remote add echo https://github.com/TheStarWarsUniverse/EchoFramework.git to add the Echo as a remote.Run git fetch --all. This will download all commits from the Echo repo.Run git switch main. This will create the main branch.Run git switch dev. This will create the dev branch.Run git push -u origin main. This will push your changes and set your primary remote correctly.Run git push -u origin dev. This will push your changes and set your primary remote correctly. "},{"title":"Updating Echo framework","type":1,"pageTitle":"Getting Started","url":"docs/GetStarted#updating-echo-framework","content":"Remember to update the Echo framework once an update has been released! Open the command bar.Run git merge echo/main.Run git push. "},{"title":"About","type":0,"sectionRef":"#","url":"docs/intro","content":"About Echo framework is a lightweight framework developed by RandomMutiny and heavily inspired on Knit framework by sleitnick. See the Getting Started guide to start using Echo.","keywords":""},{"title":"Controllers","type":0,"sectionRef":"#","url":"docs/Controllers","content":"","keywords":""},{"title":"Controllers Defined","type":1,"pageTitle":"Controllers","url":"docs/Controllers#controllers-defined","content":"Controllers are singleton provider objects that serve a specific purpose on the client. For instance, a game might have a CameraController, which manages a custom in-game camera for the player. A controller is essentially the client-side equivalent of a service on the server. "},{"title":"Creating Controllers","type":1,"pageTitle":"Controllers","url":"docs/Controllers#creating-controllers","content":"In its simplest form, a controller can be created like so: local CameraController = Echo:CreateController({ Name = &quot;CameraController&quot;}) function CameraController:EchoInit() end function CameraController:EchoStart() end return CameraController Copy "},{"title":"EchoServer","type":0,"sectionRef":"#","url":"api/EchoServer","content":"","keywords":""},{"title":"Functions","type":1,"pageTitle":"EchoServer","url":"api/EchoServer#functions","content":" "},{"title":"OnLoad","type":1,"pageTitle":"EchoServer","url":"api/EchoServer#OnLoad","content":"&lt;/&gt; EchoServer.OnLoad() → Promise Returns a promise that is resolved once Echo is loaded!  "},{"title":"OnStart","type":1,"pageTitle":"EchoServer","url":"api/EchoServer#OnStart","content":"&lt;/&gt; EchoServer.OnStart() → Promise Returns a promise that is resolved once Echo is started!  "},{"title":"GetLength","type":1,"pageTitle":"EchoServer","url":"api/EchoServer#GetLength","content":"&lt;/&gt; EchoServer:GetLength(Table: dictionary) → Counternumber Get the length of a dictionary table.  "},{"title":"GetWallyPackages","type":1,"pageTitle":"EchoServer","url":"api/EchoServer#GetWallyPackages","content":"&lt;/&gt; EchoServer:GetWallyPackages( PackageName: string,-- The Package Name of the Wally package. Realm: string-- The realm of the package, either &quot;Shared&quot; or &quot;Server&quot;. ) → WallyPackage? Get a wally package from its name and realm.  "},{"title":"LoadScripts","type":1,"pageTitle":"EchoServer","url":"api/EchoServer#LoadScripts","content":"&lt;/&gt; EchoServer:LoadScripts() → EchoServer-- Returning the Echo Server for a easiler uses of starting! Loading all modules of Echo Server!  "},{"title":"Start","type":1,"pageTitle":"EchoServer","url":"api/EchoServer#Start","content":"&lt;/&gt; EchoServer:Start() → () Initialize &amp; Starts all Echo server scripts! "},{"title":"EchoClient","type":0,"sectionRef":"#","url":"api/EchoClient","content":"","keywords":""},{"title":"Functions","type":1,"pageTitle":"EchoClient","url":"api/EchoClient#functions","content":" "},{"title":"OnLoad","type":1,"pageTitle":"EchoClient","url":"api/EchoClient#OnLoad","content":"&lt;/&gt; EchoClient.OnLoad() → Promise Returns a promise that is resolved once Echo is loaded!  "},{"title":"OnStart","type":1,"pageTitle":"EchoClient","url":"api/EchoClient#OnStart","content":"&lt;/&gt; EchoClient.OnStart() → Promise Returns a promise that is resolved once Echo is started!  "},{"title":"GetLength","type":1,"pageTitle":"EchoClient","url":"api/EchoClient#GetLength","content":"&lt;/&gt; EchoClient:GetLength(Table: dictionary) → Counternumber Get the length of a dictionary table.  "},{"title":"GetWallyPackages","type":1,"pageTitle":"EchoClient","url":"api/EchoClient#GetWallyPackages","content":"&lt;/&gt; EchoClient:GetWallyPackages( PackageName: string-- The Package Name of the Wally package. ) → WallyPackage? Get a wally package from its name.  "},{"title":"LoadScripts","type":1,"pageTitle":"EchoClient","url":"api/EchoClient#LoadScripts","content":"&lt;/&gt; EchoClient:LoadScripts() → EchoClient-- Returning the Echo Client for a easiler uses of starting! Loading all modules of Echo Client!  "},{"title":"Start","type":1,"pageTitle":"EchoClient","url":"api/EchoClient#Start","content":"&lt;/&gt; EchoClient:Start() → () Initialize &amp; Starts all Echo server scripts! "},{"title":"Wally Packages","type":0,"sectionRef":"#","url":"docs/WallyPackage","content":"","keywords":""},{"title":"Installation","type":1,"pageTitle":"Wally Packages","url":"docs/WallyPackage#installation","content":""},{"title":"1. From GitHub","type":1,"pageTitle":"Wally Packages","url":"docs/WallyPackage#1-from-github","content":"Pre-built binaries are available for Windows, macOS, and Linux from the GitHub Releases Page for Wally. "},{"title":"2. With Foreman","type":1,"pageTitle":"Wally Packages","url":"docs/WallyPackage#2-with-foreman","content":"Foreman is a toolchain manager developed for the Roblox community. You can use it to install Wally: wally = { source = &quot;UpliftGames/wally&quot;, version = &quot;0.3.1&quot; } Copy "},{"title":"3. From Source","type":1,"pageTitle":"Wally Packages","url":"docs/WallyPackage#3-from-source","content":"It's straightforward to compile Wally from source. Wally requires Rust 1.51.0 or newer. Clone the repository and use: cargo install --locked --path . Copy "},{"title":"Usuage","type":1,"pageTitle":"Wally Packages","url":"docs/WallyPackage#usuage","content":"Go to Wally.runFind the package you need and copy the Metadata. Example Cmdr = &quot;evaera/cmdr@1.8.4&quot;Paste it on the script called wally.toml.Put it under dependencies or server-dependencies. Depends the realm of your package.Run wally install in command bar after complete. "},{"title":"Services","type":0,"sectionRef":"#","url":"docs/Services","content":"","keywords":""},{"title":"Services Defined","type":1,"pageTitle":"Services","url":"docs/Services#services-defined","content":"Services are singleton provider objects that serve a specific purpose on the server. For instance, a game might have a PointsService, which manages in-game points for the players. A game might have many services. They will serve as the backbone of a game. For the sake of example, we will slowly develop PointsService to show how a service is constructed. "},{"title":"Creating Services","type":1,"pageTitle":"Services","url":"docs/Services#creating-services","content":"In its simplest form, a service can be created like so: local PointsService = Echo:CreateService({ Name = &quot;PointsService&quot;, Client = {}}) return PointsService Copy Client table optional The Client table is optional for the constructor. However, it will be added by Echo if left out. For the sake of code clarity, it is recommended to keep it in the constructor as shown above. No client table forces server-only mode If the Client table is omitted, the service will be interpreted as server-side only. This means that the client will not be able to access this service using Echo:GetService on the client. The Name field is required. This name is how code outside of your service will find it. This name must be unique from all other services. It is best practice to name your variable the same as the service name (e.g. local PointsService matches Name = &quot;PointsService&quot;). The last line (return PointsService) assumes this code is written in a ModuleScript, which is best practice for containing services. "},{"title":"Style Guide","type":1,"pageTitle":"Services","url":"docs/Services#style-guide","content":"To keep your codes look clean, there is a style guide that you are recommended to follow. -- ExampleService-- RandomMutiny-- January 8, 2021 local Echo = script:FindFirstAncestor(&quot;Echo&quot;) local ExampleService = Echo:CreateService({ Name = &quot;ExampleService&quot;, Client = {}}) function ExampleService:EchoInit() end function ExampleService:EchoStart() end return ExampleService Copy "},{"title":"Component","type":0,"sectionRef":"#","url":"docs/Components","content":"","keywords":""},{"title":"Components Defined","type":1,"pageTitle":"Component","url":"docs/Components#components-defined","content":"Bind components to Roblox instances using the Component class and CollectionService tags. "},{"title":"Creating Components","type":1,"pageTitle":"Component","url":"docs/Components#creating-components","content":"In its simplest form, a worker can be created like so: -- Example-- RandomMutiny-- January 8, 2022 local Echo = require(script:FindFirstAncestor(&quot;Echo&quot;))local Component = Echo:GetWallyPackages(&quot;Component&quot;, &quot;Shared&quot;) local ExampleComponent = Component.new({Tag = &quot;ExampleComponent&quot;}) function MyComponent:Construct() self.MyData = &quot;Hello&quot;end function MyComponent:Start() local another = self:GetComponent(AnotherComponent) another:DoSomething()end function MyComponent:Stop() self.MyData = &quot;Goodbye&quot;end return ExampleComponent Copy "},{"title":"Style Guide","type":1,"pageTitle":"Component","url":"docs/Components#style-guide","content":"To keep your codes look clean, there is a style guide that you are recommended to follow. -- SCRIPTNAME-- AUTHOR-- MONTHNAME DD, YYYY local Echo = require(script:FindFirstAncestor(&quot;Echo&quot;))local Component = Echo:GetWallyPackages(&quot;Component&quot;, &quot;Shared&quot;) local ExampleComponent = Component.new({Tag = &quot;ExampleComponent&quot;}) function MyComponent:Construct() self.MyData = &quot;Hello&quot;end function MyComponent:Start() local another = self:GetComponent(AnotherComponent) another:DoSomething()end function MyComponent:Stop() self.MyData = &quot;Goodbye&quot;end return ExampleComponent Copy "},{"title":"Workers","type":0,"sectionRef":"#","url":"docs/Workers","content":"","keywords":""},{"title":"Workers Defined","type":1,"pageTitle":"Workers","url":"docs/Workers#workers-defined","content":"Workers are basically LocalScript and Script from Roblox. "},{"title":"Creating Workers","type":1,"pageTitle":"Workers","url":"docs/Workers#creating-workers","content":"In its simplest form, a worker can be created like so: -- Example-- RandomMutiny-- January 8, 2022 local Echo = require(script:FindFirstAncestor(&quot;Echo&quot;)) -- codes... return nil Copy "},{"title":"Style Guide","type":1,"pageTitle":"Workers","url":"docs/Workers#style-guide","content":"To keep your codes look clean, there is a style guide that you are recommended to follow. -- SCRIPTNAME-- AUTHOR-- MONTHNAME DD, YYYY local Echo = require(script:FindFirstAncestor(&quot;Echo&quot;)) local Service = game:GetService(&quot;ServiceName&quot;) local Variables = &quot;Variables&quot; return nil Copy "}]