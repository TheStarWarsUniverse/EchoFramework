[{"title":"EchoInstaller","type":0,"sectionRef":"#","url":"api/EchoInstaller","content":"","keywords":""},{"title":"Functions","type":1,"pageTitle":"EchoInstaller","url":"api/EchoInstaller#functions","content":" "},{"title":"Start","type":1,"pageTitle":"EchoInstaller","url":"api/EchoInstaller#Start","content":"This item only works when running on the client. Client This item only works when running on the server. Server &lt;/&gt; EchoInstaller:Start() → () Start &amp; init the Echo framework. EchoInstaller:Start()   "},{"title":"Install","type":1,"pageTitle":"EchoInstaller","url":"api/EchoInstaller#Install","content":"This item only works when running on the client. Client This item only works when running on the server. Server &lt;/&gt; EchoInstaller:Install() → EchoInstaller Installs Echo at ServerStorage, ReplicatedStorage, and StarterPlayerScripts. Returning the Installer for easiler uses. EchoInstaller:Install()  "},{"title":"EchoServer","type":0,"sectionRef":"#","url":"api/EchoServer","content":"","keywords":""},{"title":"Types","type":1,"pageTitle":"EchoServer","url":"api/EchoServer#types","content":" "},{"title":"ServiceDefine","type":1,"pageTitle":"EchoServer","url":"api/EchoServer#ServiceDefine","content":"&lt;/&gt; interface ServiceDefine { Name: string Client: table? [any]: any } Used to define a service while creating it in &quot;CreateService&quot;  "},{"title":"Service","type":1,"pageTitle":"EchoServer","url":"api/EchoServer#Service","content":"&lt;/&gt; interface Service { Name: string Client: ServiceClient [any]: any }   "},{"title":"ServiceClient","type":1,"pageTitle":"EchoServer","url":"api/EchoServer#ServiceClient","content":"&lt;/&gt; interface ServiceClient { Server: Service [any]: any }  "},{"title":"Functions","type":1,"pageTitle":"EchoServer","url":"api/EchoServer#functions","content":" "},{"title":"Connect","type":1,"pageTitle":"EchoServer","url":"api/EchoServer#Connect","content":"&lt;/&gt; EchoServer:Connect( Name: string, Function: function ) → () Connects a function to the signal, which will be called anytime the signal is fired.  "},{"title":"Disconnect","type":1,"pageTitle":"EchoServer","url":"api/EchoServer#Disconnect","content":"&lt;/&gt; EchoServer:Disconnect(Name: string) → () Disconnects a function from listening to remote event.  "},{"title":"FireClient","type":1,"pageTitle":"EchoServer","url":"api/EchoServer#FireClient","content":"&lt;/&gt; EchoServer:FireClient( Client: ClientInstance, Name: string, [any]: any? ) → () Fires the signal at the specified client with any arguments.  "},{"title":"FireAllClients","type":1,"pageTitle":"EchoServer","url":"api/EchoServer#FireAllClients","content":"&lt;/&gt; EchoServer:FireAllClients( Name: string, [any]: any? ) → () Fires the signal at the clients with any arguments.  "},{"title":"InvokeClient","type":1,"pageTitle":"EchoServer","url":"api/EchoServer#InvokeClient","content":"&lt;/&gt; EchoServer:InvokeClient( Client: ClientInstance, Name: string, [any]: any? ) → () Invoke the signal at the client with any arguments and expected return from the client.  "},{"title":"CreateService","type":1,"pageTitle":"EchoServer","url":"api/EchoServer#CreateService","content":"&lt;/&gt; EchoServer:CreateService(ServiceInfo: ServiceDefine) → Service Constructs a new service. local EchoService = Echo:CreateService({ Name = &quot;EchoService&quot;, Client = {} }) function EchoService.Client:Example(Player: Instance, ...) print(&quot;Example&quot;) end function EchoService:EchoStart() print(&quot;Echo Start&quot;) end function EchoService:EchoInit() print(&quot;Echo Init&quot;) end return EchoService   "},{"title":"GetService","type":1,"pageTitle":"EchoServer","url":"api/EchoServer#GetService","content":"&lt;/&gt; EchoServer:GetService(ServiceName: string) → Service? Get Services by its name.  "},{"title":"GetWallySharedPackages","type":1,"pageTitle":"EchoServer","url":"api/EchoServer#GetWallySharedPackages","content":"&lt;/&gt; EchoServer:GetWallySharedPackages(PackageName: string) → WallyPackage Get a shared wally package from server.  "},{"title":"GetWallyServerPackages","type":1,"pageTitle":"EchoServer","url":"api/EchoServer#GetWallyServerPackages","content":"&lt;/&gt; EchoServer:GetWallyServerPackages(PackageName: string) → WallyPackage Get a server wally package from server. "},{"title":"EchoClient","type":0,"sectionRef":"#","url":"api/EchoClient","content":"","keywords":""},{"title":"Types","type":1,"pageTitle":"EchoClient","url":"api/EchoClient#types","content":" "},{"title":"ControllerDefine","type":1,"pageTitle":"EchoClient","url":"api/EchoClient#ControllerDefine","content":"&lt;/&gt; interface ControllerDefine { Name: string Server: table? [any]: any } Used to define a controller while creating it in &quot;CreateController&quot;  "},{"title":"Controller","type":1,"pageTitle":"EchoClient","url":"api/EchoClient#Controller","content":"&lt;/&gt; interface Controller { Name: string Server: ControllerServer [any]: any }   "},{"title":"ControllerServer","type":1,"pageTitle":"EchoClient","url":"api/EchoClient#ControllerServer","content":"&lt;/&gt; interface ControllerServer { Client: Controller [any]: any }  "},{"title":"Functions","type":1,"pageTitle":"EchoClient","url":"api/EchoClient#functions","content":" "},{"title":"CreateController","type":1,"pageTitle":"EchoClient","url":"api/EchoClient#CreateController","content":"&lt;/&gt; EchoClient:CreateController(ControllerInfo: ControllerDefine) → Controller Constructs a new controller. local EchoController = Echo:CreateController({ Name = &quot;EchoController&quot;, Server = {} }) function EchoController.Server:Example(...) print(&quot;Example&quot;) end function EchoController:EchoStart() print(&quot;Echo Start&quot;) end function EchoController:EchoInit() print(&quot;Echo Init&quot;) end return EchoController   "},{"title":"GetController","type":1,"pageTitle":"EchoClient","url":"api/EchoClient#GetController","content":"&lt;/&gt; EchoClient:GetController(ControllerName: string) → Controller? Gets the controller by name. Throws an error if the controller is not found.  "},{"title":"Connect","type":1,"pageTitle":"EchoClient","url":"api/EchoClient#Connect","content":"&lt;/&gt; EchoClient:Connect( Name: string, Function: function ) → () Connects a function to the signal, which will be called anytime the signal is fired.  "},{"title":"Disconnect","type":1,"pageTitle":"EchoClient","url":"api/EchoClient#Disconnect","content":"&lt;/&gt; EchoClient:Disconnect(Name: string) → () Connects a function to the signal, which will be called anytime the signal is fired.  "},{"title":"FireServer","type":1,"pageTitle":"EchoClient","url":"api/EchoClient#FireServer","content":"&lt;/&gt; EchoClient:FireServer( Function: string, [any]: any? ) → () Fires the signal at the server with any arguments.  "},{"title":"InvokeServer","type":1,"pageTitle":"EchoClient","url":"api/EchoClient#InvokeServer","content":"&lt;/&gt; EchoClient:InvokeServer( Function: string, [any]: any? ) → () Invoke the signal at the server with any arguments and expected return from the server.  "},{"title":"GetWallySharedPackages","type":1,"pageTitle":"EchoClient","url":"api/EchoClient#GetWallySharedPackages","content":"&lt;/&gt; EchoClient:GetWallySharedPackages(PackageName: string) → WallyPackage Get a shared wally package from client. "}]